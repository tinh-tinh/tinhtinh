// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import (
	"fmt"

	"github.com/swaggo/swag"
)

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pets": {
            "get": {
                "description": "Returns all pets from the system that the user has access to",
                "operationId": "findPets",
                "produces": [
                "application/json",
                "application/xml",
                "text/xml",
                "text/html"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "tags to filter by",
                        "required": false,
                        "type": "array",
                        "items": {
                        "type": "string"
                        },
                        "collectionFormat": "csv"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "maximum number of results to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new pet in the store.  Duplicates are allowed",
                "operationId": "addPet",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "pet",
                        "in": "body",
                        "description": "Pet to add to the store",
                        "required": true,
                        "schema": {
                        "$ref": "#/definitions/NewPet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                        "$ref": "#/definitions/Pet"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                        "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            }
        },
        "/pets/{id}": {
            "get": {
                "description": "Returns a user based on a single ID, if the user does not have access to the pet",
                "operationId": "findPetById",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of pet to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                        "$ref": "#/definitions/Pet"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                        "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes a single pet based on the ID supplied",
                "operationId": "deletePet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of pet to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "pet deleted"
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                        "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Pet": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/NewPet"
                },
                {
                    "required": [
                        "id"
                    ],
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            ]
        },
        "NewPet": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "ErrorModel": {
            "type": "object",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                "type": "integer",
                "format": "int32"
                },
                "message": {
                "type": "string"
                }
            }
        }
    }
}`

type Any map[string]interface{}

var temp = Any{
    "schemes": []string{"http", "https"},
    "swagger": "2.0",
    "info": Any{
        "description": "This is a sample server Tinh tinh server.",
        "title": "Swagger Example API for Tinh Tinh",
        "termsOfService": "http://swagger.io/terms/",
        "contact": Any{
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io",
        },
        "license": Any{
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
        },
        "version": "1.0",
    },
    "host": "tinhtinh.swagger.io",
    "basePath": "/v1",
    "paths": Any{
        "/pets": Any{
            "get": Any{
                "description": "Returns all pets from the system that the user has access to",
                "operationId": "findPets",
                "produces": []string{
                    "application/json",
                    "application/xml",
                    "text/xml",
                    "text/html",
                },
                "parameters": []Any{
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "tags to filter by",
                        "required": false,
                        "type": "array",
                        "items": Any{
                            "type": "string",
                        },
                        "collectionFormat": "csv",
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "maximum number of results to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                    },
                },
                "responses":Any{
                    "200": Any{
                        "description": "pet response",
                        "schema": Any{
                            "type": "array",
                            "items": Any{
                                "$ref": "#/definitions/Pet",
                                },
                            },
                        },
                    "default": Any{
                        "description": "unexpected error",
                        "schema": Any{
                            "$ref": "#/definitions/ErrorModel",
                        },
                    },
                },
            },
            "post": Any{
                "description": "Creates a new pet in the store.  Duplicates are allowed",
                "operationId": "addPet",
                "produces": []string{
                    "application/json",
                },
                "parameters": []Any{
                    {
                        "name": "pet",
                        "in": "body",
                        "description": "Pet to add to the store",
                        "required": true,
                        "schema": Any{
                            "$ref": "#/definitions/NewPet",
                        },
                    },
                },
                "responses": Any{
                    "200": Any{
                        "description": "pet response",
                        "schema": Any{
                            "$ref": "#/definitions/Pet",
                        },
                    },
                    "default":Any {
                        "description": "unexpected error",
                        "schema": Any{
                            "$ref": "#/definitions/ErrorModel",
                        },
                    },
                },
            },
        },
        "/pets/{id}": Any{
            "get": Any{
                "description": "Returns a user based on a single ID, if the user does not have access to the pet",
                "operationId": "findPetById",
                "produces": []string{
                    "application/json",
                    "application/xml",
                    "text/xml",
                    "text/html",
                },
                "parameters": []Any{
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of pet to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                    },
                },
                "responses": Any{
                    "200": Any{
                        "description": "pet response",
                        "schema": Any{
                            "$ref": "#/definitions/Pet",
                        },
                    },
                    "default": Any{
                        "description": "unexpected error",
                        "schema": Any{
                            "$ref": "#/definitions/ErrorModel",
                        },
                    },
                },
            },
            "delete": Any{
                "description": "deletes a single pet based on the ID supplied",
                "operationId": "deletePet",
                "parameters": []Any{
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of pet to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                    },
                },
                "responses": Any{
                    "204": Any{
                        "description": "pet deleted",
                    },
                    "default": Any{
                        "description": "unexpected error",
                        "schema": Any{
                            "$ref": "#/definitions/ErrorModel",
                        },
                    },
                },
            },
        },
    },
    "definitions": Any{
        "Pet": Any{
            "type": "object",
            "allOf": []Any{
                {
                    "$ref": "#/definitions/NewPet",
                },
                {
                    "required": []string{
                        "id",
                    },
                    "properties": Any{
                        "id": Any{
                            "type": "integer",
                            "format": "int64",
                        },
                    },
                },
            },
        },
        "NewPet": Any{
            "type": "object",
            "required": []string{
                "name",
            },
            "properties": Any{
                "name": Any{
                    "type": "string",
                },
                "tag": Any{
                    "type": "string",
                },
            },
        },
        "ErrorModel": Any{
            "type": "object",
            "required": []string{
                "code",
                "message",
            },
            "properties": Any{
                "code": Any{
                    "type": "integer",
                    "format": "int32",
                },
                "message": Any{
                    "type": "string",
                },
            },
        },
    },
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "tinhtinh.swagger.io",
	BasePath:         "/v2",
	Schemes:          []string{},
	Title:            "Swagger Example API for Tinh Tinh",
	Description:      "This is a sample server Tinh tinh server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  fmt.Sprint(temp),
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
