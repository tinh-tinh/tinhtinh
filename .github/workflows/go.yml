# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  test-root:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.x' ]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.0'

    - name: Install dependencies
      run: go mod download

    - name: Build
      run: go build -v ./...

    - name: Clear cache
      run: go clean -testcache

    - name: Test
      run: go test -cover ./... -coverprofile=coverage.txt

    - name: Remove temp file
      run: 	rm -rf middleware/logger/logs common/exception/logs

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  test-redis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.x' ]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Detect changes in microservices/redis
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Fetch the base branch (master) and PR commit (head)
          git fetch origin ${{ github.event.pull_request.base.ref }}
          TARGET="origin/${{ github.event.pull_request.base.ref }}"
          PR_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Get the diff between the base branch and PR branch
          CHANGED=$(git diff --name-only "$TARGET" "$PR_SHA" | grep '^microservices/redis/' || true)
        else
          # Regular push event, compare before and after commits
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^microservices/redis/' || true)
        fi

        if [ -z "$CHANGED" ]; then
          echo "No changes in Redis code."
          echo "should_run=false" >> $GITHUB_OUTPUT
        else
          echo "Found changes in Redis code."
          echo "should_run=true" >> $GITHUB_OUTPUT
        fi

    - name: Set up Go
      if: steps.changes.outputs.should_run == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.0'

    - name: Test Redis
      if: steps.changes.outputs.should_run == 'true'
      run: cd microservices/redis; go test -cover ./...

  test-nats:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.x' ]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      nats:
        # Docker Hub image
        image: nats:latest
        ports:
          # Maps port 6379 on service container to the host
          - 4222:4222

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure full history for diffs

    - name: Detect changes in microservices/nats
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Fetch the base branch (master) and PR commit (head)
          git fetch origin ${{ github.event.pull_request.base.ref }}
          TARGET="origin/${{ github.event.pull_request.base.ref }}"
          PR_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Get the diff between the base branch and PR branch
          CHANGED=$(git diff --name-only "$TARGET" "$PR_SHA" | grep '^microservices/nats/' || true)
        else
          # Regular push event, compare before and after commits
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^microservices/nats/' || true)
        fi

        if [ -z "$CHANGED" ]; then
          echo "No changes in NATS code."
          echo "should_run=false" >> $GITHUB_OUTPUT
        else
          echo "Found changes in NATS code."
          echo "should_run=true" >> $GITHUB_OUTPUT
        fi

    - name: Set up Go
      if: steps.changes.outputs.should_run == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.0'

    # Verify NATS Server is Running
    - name: Verify NATS Server
      if: steps.changes.outputs.should_run == 'true'
      run: |
        echo "Checking if NATS server is running on port 4222..."
        nc -zv 127.0.0.1 4222

    - name: Test NATS
      if: steps.changes.outputs.should_run == 'true'
      run: cd microservices/nats; go test -cover ./...

  test-rabbitmq:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.x' ]

    services:
      rabbitmq:
        image: rabbitmq:3.8
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672  # RabbitMQ default port
          - 15672:15672  # RabbitMQ Management Plugin
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
  

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      - name: Detect changes in microservices/amqlib
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Fetch the base branch (master) and PR commit (head)
            git fetch origin ${{ github.event.pull_request.base.ref }}
            TARGET="origin/${{ github.event.pull_request.base.ref }}"
            PR_SHA="${{ github.event.pull_request.head.sha }}"
            
            # Get the diff between the base branch and PR branch
            CHANGED=$(git diff --name-only "$TARGET" "$PR_SHA" | grep '^microservices/amqlib/' || true)
          else
            # Regular push event, compare before and after commits
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^microservices/amqlib/' || true)
          fi

          if [ -z "$CHANGED" ]; then
            echo "No changes in RabbitMQ code."
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "Found changes in RabbitMQ code."
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        if: steps.changes.outputs.should_run == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'

      - name: Wait for RabbitMQ to be ready
        if: steps.changes.outputs.should_run == 'true'
        run: |
          for i in {1..10}; do
            if nc -z localhost 5672; then
              echo "RabbitMQ is up and running"
              break
            fi
            echo "Waiting for RabbitMQ..."
            sleep 5
          done
  
      - name: Test RabbitMQ
        if: steps.changes.outputs.should_run == 'true'
        run: cd microservices/amqlib; go test -cover ./...

  test-kafka:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22.x']

    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
          - 2181:2181
        options: >-
          --env ZOOKEEPER_CLIENT_PORT=2181
          --env ZOOKEEPER_TICK_TIME=2000

      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        options: >-
          --env KAFKA_BROKER_ID=1
          --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
          --env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
          --env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
          --env KAFKA_CREATE_TOPICS=topic1:1:1

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Wait for Zookeeper
        run: |
          for i in {1..30}; do
            nc -zv localhost 2181 && echo "Zookeeper is ready!" && break
            echo "Waiting for Zookeeper..."
            sleep 2
          done

      - name: Wait for Kafka
        run: |
          for i in {1..30}; do
            nc -zv kafka 9092 && echo "Kafka is ready!" && break
            echo "Waiting for Kafka..."
            sleep 2
          done

      - name: Set Kafka Broker ENV
        run: echo "KAFKA_BROKERS=kafka:9092" >> $GITHUB_ENV

      - name: Run Go Kafka Tests
        run: cd microservices/kafka && go test -v -cover ./...